////////////////////// RECUP HEURE INTERNET + AFFICHE SUR MODULE /////////////
#include <Arduino.h>
#include <led.h>
// // conexion wifi
#include <PubSubClient.h>
#include <WiFiUdp.h>
#include <NTPClientLib.h>
#include <Time.h>
#include <TimeLib.h>
#include <Timezone.h>
#include <TM1637Display.h>

#ifndef STASSID
#define STASSID "TouchMetiv"
#define STAPSK "tupuesdesbras"
#define CLK 0
#define DIO 4

TM1637Display display(CLK, DIO);

#endif
const char *ssid = STASSID;
const char *password = STAPSK;
const char *mqtt_server = "test.mosquitto.org";
const char *host = "djxmmx.net";
const uint16_t port = 17;

#define ONBOARDLED 2 // Built in LED on ESP-12/ESP-07
#define SHOW_TIME_PERIOD 500
#define NTP_TIMEOUT 1500
int8_t timeZone = 1;
int8_t minutesTimeZone = 0;
const PROGMEM char *ntpServer = "pool.ntp.org";
bool wifiFirstConnected = false;
void onSTAConnected(WiFiEventStationModeConnected ipInfo)
{
    Serial.printf("Connected to %s\r\n", ipInfo.ssid.c_str());
}
// Start NTP only after IP network is connected
void onSTAGotIP(WiFiEventStationModeGotIP ipInfo)
{
    Serial.printf("Got IP: %s\r\n", ipInfo.ip.toString().c_str());
    Serial.printf("Connected: %s\r\n", WiFi.status() == WL_CONNECTED ? "yes" : "no");
    digitalWrite(ONBOARDLED, LOW); // Turn on LED
    wifiFirstConnected = true;
}
// Manage network disconnection
void onSTADisconnected(WiFiEventStationModeDisconnected event_info)
{
    Serial.printf("Disconnected from SSID: %s\n", event_info.ssid.c_str());
    Serial.printf("Reason: %d\n", event_info.reason);
    digitalWrite(ONBOARDLED, HIGH); // Turn off LED
    //NTP.stop(); // NTP sync can be disabled to avoid sync errors
    WiFi.reconnect();
}
void processSyncEvent(NTPSyncEvent_t ntpEvent)
{
    if (ntpEvent < 0)
    {
        Serial.printf("Time Sync error: %d\n", ntpEvent);
        if (ntpEvent == noResponse)
            Serial.println("NTP server not reachable");
        else if (ntpEvent == invalidAddress)
            Serial.println("Invalid NTP server address");
        else if (ntpEvent == errorSending)
            Serial.println("Error sending request");
        else if (ntpEvent == responseError)
            Serial.println("NTP response error");
    }
    else
    {
        if (ntpEvent == timeSyncd)
        {
            Serial.print("Got NTP time: ");
            Serial.println(NTP.getTimeDateString(NTP.getLastNTPSync()));
        }
    }
}
boolean syncEventTriggered = false; // True if a time even has been triggered
NTPSyncEvent_t ntpEvent;            // Last triggered event
void setup()
{
    static WiFiEventHandler e1, e2, e3;
    Serial.begin(115200);
    Serial.println();
    WiFi.mode(WIFI_STA);
    WiFi.begin(STASSID, STAPSK);
    pinMode(ONBOARDLED, OUTPUT);    // Onboard LED
    digitalWrite(ONBOARDLED, HIGH); // Switch off LED
    NTP.onNTPSyncEvent([](NTPSyncEvent_t event) {
        ntpEvent = event;
        syncEventTriggered = true;
    });
    // Deprecated
    /*WiFi.onEvent([](WiFiEvent_t e) {
        Serial.printf("Event wifi -----> %d\n", e);
    });*/
    e1 = WiFi.onStationModeGotIP(onSTAGotIP); // As soon WiFi is connected, start NTP Client
    e2 = WiFi.onStationModeDisconnected(onSTADisconnected);
    e3 = WiFi.onStationModeConnected(onSTAConnected);
    //test
}
void loop()
{
    static int i = 0;
    static int last = 0;
    if (wifiFirstConnected)
    {
        wifiFirstConnected = false;
        NTP.setInterval(63);
        NTP.setNTPTimeout(NTP_TIMEOUT);
        NTP.begin(ntpServer, timeZone, true, minutesTimeZone);
    }
    if (syncEventTriggered)
    {
        processSyncEvent(ntpEvent);
        syncEventTriggered = false;
    }
    if ((millis() - last) > SHOW_TIME_PERIOD)
    {
        //Serial.println(millis() - last);
        last = millis();
        Serial.println(NTP.getTimeDateString());
        uint8_t heure = hour();
        uint8_t min = minute();
        Serial.println(heure);
        Serial.println(min);
        i++;

        //AFFICHAGE SUR LE MODULE
        uint16_t heureXmin = (heure * 100) + min;

        display.clear();
        display.setBrightness(0x0f);

        display.showNumberDec(heureXmin, true);

        display.showNumberDecEx(heureXmin, (0xf0), true);
    }
}


///////// AFFICHAGE SUR MODULE 7 SEGMENTS //////////
// #include <Arduino.h>
// #include <TM1637Display.h>

// // Module connection pins (Digital Pins)
// #define CLK 0
// #define DIO 4

// TM1637Display display(CLK, DIO);

// void setup()
// {
// }

// void loop()
// {
//     display.clear();
//     display.setBrightness(0x0f);

//     display.showNumberDec(301, true); // Expect: 0301
//     delay(500);

//     // Run through all the dots
//     display.showNumberDecEx(301, (0xf0), true);
//     delay(500);
// }